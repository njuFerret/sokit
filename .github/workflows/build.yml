name: build Task

permissions:
  contents: write

on:
  push:
    branches: [ "master" ]

jobs:
  versions_config:
    name: Config libraries and build
    runs-on: ubuntu-latest
    outputs:      
      llvm-version: ${{ steps.get-versions.outputs.llvm-version }}
      llvm-link-prefix: ${{ steps.get-versions.outputs.llvm-link-prefix }}
      mingw-version: ${{ steps.get-versions.outputs.mingw-version }}
      mingw-link-prefix: ${{ steps.get-versions.outputs.mingw-link-prefix }}
      qt-version: ${{ steps.get-versions.outputs.qt-version }}
      qt-link-prefix: ${{ steps.get-versions.outputs.qt-link-prefix }}
      install-prefix: ${{ steps.get-versions.outputs.install-prefix }}

      # cmake-version: ${{ steps.get-versions.outputs.cmake-version }}
      build-date: ${{ steps.date.outputs.build-date }}
    steps:
      - name: generate library version files
        uses: actions/checkout@v4.2.2
      - name: generate version files
        run: |
          python3 ./utils/libraries_version.py
          ls -l versions
          
      - name: get versions
        id: get-versions
        run: |
          echo "llvm-version=$(cat versions/llvm)" >> $GITHUB_OUTPUT
          echo "llvm-link-prefix=$(cat versions/llvm_link_prefix)" >> $GITHUB_OUTPUT
          echo "mingw-version=$(cat versions/mingw)" >> $GITHUB_OUTPUT
          echo "mingw-link-prefix=$(cat versions/mingw_link_prefix)" >> $GITHUB_OUTPUT
          echo "qt-version=$(cat versions/qt)" >> $GITHUB_OUTPUT
          echo "qt-link-prefix=$(cat versions/qt_link_prefix)" >> $GITHUB_OUTPUT
          echo "install-prefix=$(cat versions/install_prefix)" >> $GITHUB_OUTPUT
          

      - name: get build date      
        id: date        
        run: |  
           echo "build-date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  check-versions:
    name: Check versions
    runs-on: ubuntu-latest
    needs: versions_config
    steps:
      - name: show library versions
        run: |
          echo "llvm-version=${{ needs.versions_config.outputs.llvm-version }}"
          echo "llvm-link-prefix=${{ needs.versions_config.outputs.llvm-link-prefix }}"
          echo "mingw-version=${{ needs.versions_config.outputs.mingw-version }}"
          echo "mingw-link-prefix=${{ needs.versions_config.outputs.mingw-link-prefix }}"
          echo "qt-version=${{ needs.versions_config.outputs.qt-version }}"
          echo "qt-link-prefix=${{ needs.versions_config.outputs.qt-link-prefix }}"
          echo "install-prefix=${{ needs.versions_config.outputs.install-prefix }}"



  build:
    name: build sokit
    runs-on: windows-2022
    needs:
      - versions_config
      - check-versions
    strategy:
      fail-fast: false

    steps:
      - name: check out 
        uses: actions/checkout@v4.2.2


      - name: download libraries
        shell: cmd
        run: |
          @REM 检查空格！！！！尼玛！！！
          set mingw=${{ needs.versions_config.outputs.mingw-version }}
          set START=%CD%
          set _qt_ver=${{ needs.versions_config.outputs.qt-version }}
          set _llvm_ver=${{ needs.versions_config.outputs.llvm-version }}
          set INSTALL_BASE=${{ needs.versions_config.outputs.install-prefix }}
          set QT_INSTALL_DIR=%INSTALL_BASE%\Qt
          

          echo ---------------------------download mingw --------------------------------
          curl -L -o %mingw%.7z       ${{ needs.versions_config.outputs.mingw-link-prefix }}/%mingw%.7z       
          echo ---------------------------download qt lib build %_qt_ver% --------------------------------
          @REM # qt-v6.8.0/6.8.0_llvm-19.1.3_MinGW-x86_64-13.1.0-release-posix-seh-ucrt-rt_v11-rev1_fix2.7z
          curl -L -o qt_lib.7z    ${{ needs.versions_config.outputs.qt-link-prefix }}/qt-v%_qt_ver%/%_qt_ver%_llvm-%_llvm_ver%_%mingw%.7z
          
          mkdir %QT_INSTALL_DIR%
          7z x %mingw%.7z
          7z x qt_lib.7z -o%QT_INSTALL_DIR%

          dir %QT_INSTALL_DIR%

      - name: toolsets setup 
        shell: cmd
        # system(windows-2022) has shipped with cmake/7zip
        run: |
          @REM 检查空格！！！！尼玛！！！
          set mingw=${{ needs.versions_config.outputs.mingw-version }}
          set START=%CD%
          set _qt_ver=${{ needs.versions_config.outputs.qt-version }}
          @REM set _llvm_ver=${{ needs.versions_config.outputs.llvm-version }}
          set INSTALL_BASE=${{ needs.versions_config.outputs.install-prefix }}
          set QT_QMAKE_DIR=%INSTALL_BASE%\Qt\%_qt_ver%\qt\bin

         
          set PATH=%QT_QMAKE_DIR%;%PATH%          
          set PATH=%CD%\MinGW\bin;%PATH%
          @REM mingw 必须放在第一个
          set PATH=%CD%\MinGW\bin;%PATH%

          echo -------------------- test qmake --------------------------
          qmake --version 
          echo -------------------- test python --------------------------
          python -V
          echo -------------------- test perl --------------------------
          perl -v | findstr version                        
          echo -------------------- test git --------------------------
          git --version
          echo -------------------- test ruby --------------------------
          ruby --version          
          echo -------------------- test 7z --------------------------
          7z | findstr 7-Zip
          echo -------------------- test mingw --------------------------
          g++ -v
          echo -------------------- test end --------------------------

      - name: build and zipped
        shell: cmd
        run: | 
          set NAME=sokit
          set START=%CD%
          set _qt_ver=${{ needs.versions_config.outputs.qt-version }}
          set INSTALL_BASE=${{ needs.versions_config.outputs.install-prefix }}
          set QT_QMAKE_DIR=%INSTALL_BASE%\Qt\%_qt_ver%\qt\bin
          @REM mingw 必须放在第一个
          set PATH=%QT_QMAKE_DIR%;%PATH%          
          set PATH=%CD%\MinGW\bin;%PATH% 
          mkdir tmp
          cd tmp
          qmake ..\build\general\qmake\%NAME%.pro
          make release -j
          cd ..
          rd /q /s tmp 

          echo --------------------------windeployqt----------------------------
          cd bin
          windeployqt --release --no-quick-import --no-translations sokit.exe
          cd ..
          echo --------------------------mkdir %NAME%----------------------------
          mkdir %NAME%\platforms          
          echo --------------------------copy files----------------------------
          for /f %%v in (release.txt) do copy .\bin\%%v .\%NAME%\%v /y
          dir
          echo --------------------------zippe %NAME%----------------------------
          7z a %NAME%_qt-%_qt_ver%.7z %CD%\%NAME%
          dir

      - name: upload zipped binarires
        uses:  actions/upload-artifact@v4.4.3
        with:
          name: 'ziped-sokit'
          path: ./sokit_qt-${{ needs.versions_config.outputs.qt-version }}.7z

  release:
    permissions:
      contents: write
  
    runs-on: ubuntu-latest
    needs:       
      - versions_config
      - build

    steps:
    - name: Download 
      uses: actions/download-artifact@v4
      with:          
        name: 'ziped-sokit'          
        # merge-multiple: true
        path: ./

    - name: check file
      shell: bash
      run: |
        ls -l
        
        

    - name: Upload to Release
      id: upload_to_release
      uses: softprops/action-gh-release@v2
      with:
        files: "*.7z"
        tag_name: sokit-release

  